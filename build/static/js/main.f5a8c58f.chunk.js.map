{"version":3,"sources":["components/Image/Image.js","components/Image/ImageData.js","components/Form/Schema.js","utilities/capitalize.js","components/Form/ImageForm.js","components/DataLabelling.js","App.js","serviceWorker.js","index.js"],"names":["Image","url","id","src","alt","ImageData","code","diameter","material","shape","className","schema","B","fields","percentage","type","minimum","maximum","remarks","max_length","DAGS","JOL","angle","RFJ","TF","radius","near_joint","capitalize","string","words","splitWords","replace","split","length","i","push","toUpperCase","substring","join","ImageForm","setRenderImage","useForm","register","handleSubmit","reset","formFields","postImage","data","api","fetch","method","headers","body","JSON","stringify","then","response","ok","console","log","getNewImage","error","renderedFields","returnFields","keys","Object","sort","name","key","min","max","minLength","min_length","maxLength","required","ref","onSubmit","value","DataLabelling","useState","React","useEffect","results","setResults","renderImage","getImage","json","catch","frame_url","pipe_parameters","renderResults","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f5a8c58f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Image.css';\n\nconst Image = ({ url, id }) => {\n  return <img src={url} alt={id} />;\n};\n\nexport default Image;\n","import React from 'react';\n\nimport './ImageData.css';\n\nconst ImageData = ({ code, diameter, material, shape }) => {\n  return (\n    <div className='image-data'>\n      <h1>Image Data</h1>\n      <h3>Code: {code}</h3>\n      <h3>Diameter: {diameter}</h3>\n      <h3>Material: {material}</h3>\n      <h3>Shape: {shape}</h3>\n    </div>\n  );\n};\n\nexport default ImageData;\n","const schema = {\n  B: {\n    fields: {\n      percentage: {\n        type: 'number',\n        minimum: 50,\n        maximum: 100,\n      },\n      remarks: {\n        type: 'string',\n        max_length: 128,\n      },\n    },\n  },\n  DAGS: {\n    fields: {\n      percentage: {\n        type: 'number',\n        minimum: 0,\n        maximum: 100,\n      },\n      remarks: {\n        type: 'string',\n        max_length: 128,\n      },\n    },\n  },\n  JOL: {\n    fields: {\n      angle: {\n        type: 'number',\n        minimum: 0,\n        maximum: 45,\n      },\n    },\n  },\n  RFJ: {\n    fields: {\n      percentage: {\n        type: 'number',\n        minimum: 0,\n        maximum: 100,\n      },\n      angle: {\n        type: 'number',\n        minimum: 1,\n        maximum: 360,\n      },\n    },\n  },\n  TF: {\n    fields: {\n      radius: {\n        type: 'number',\n        minimum: 0.0,\n        maximum: 16.0,\n      },\n      near_joint: {\n        type: 'string',\n        max_length: 3,\n      },\n    },\n  },\n};\n\nexport default schema;\n","const capitalize = string => {\n  let puncutationless = string.replace(/[.,\\\\/#!$%\\\\^&\\\\*;:{}=\\-_`~()]/g, ' ');\n  const words = [];\n  const splitWords = puncutationless.split(' ');\n  if (splitWords.length > 0) {\n    for (let i = 0; i < splitWords.length; i++) {\n      words.push(splitWords[i][0].toUpperCase() + splitWords[i].substring(1));\n    }\n  }\n  return words.join(' ');\n};\n\ncapitalize('no_shade');\n\nexport default capitalize;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport './ImageForm.css';\nimport schema from './Schema';\nimport capitalize from '../../utilities/capitalize';\n\nconst ImageForm = ({ code, id, setRenderImage }) => {\n  const { register, handleSubmit, reset } = useForm();\n  const formFields = schema[code].fields;\n\n  const onSubmit = data => {\n    // makes POST request from API, if passes form validation\n    postImage(data);\n  };\n\n  const postImage = data => {\n    const api = `https://tyi19eoxij.execute-api.us-west-2.amazonaws.com/prod/${id}`;\n    fetch(api, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    }).then(response => {\n      if (response.ok) {\n        console.log('Success: ', response);\n        getNewImage();\n      } else {\n        console.error('Error: ', response);\n      }\n    });\n  };\n\n  const getNewImage = () => {\n    // sets the state for the parent component to fetch and render a new image\n    setRenderImage(id);\n    //renders new form fields\n    renderedFields();\n    //resets the form fields\n    reset();\n  };\n\n  const renderedFields = () => {\n    let returnFields = [];\n    let keys = Object.keys(formFields).sort();\n    for (let i = 0; i < keys.length; i++) {\n      let name = keys[i];\n      returnFields.push(\n        <div key={name}>\n          <label className='form-label'>{capitalize(name)}</label>\n          <br />\n          <input\n            className='form-field'\n            name={name}\n            type={formFields[name].type}\n            min={formFields[name].minimum}\n            max={formFields[name].maximum}\n            minLength={formFields[name].min_length}\n            maxLength={formFields[name].max_length}\n            required={true}\n            ref={register}\n          />\n          <br />\n        </div>,\n      );\n    }\n    return (\n      <>\n        <div>{returnFields}</div>\n      </>\n    );\n  };\n\n  return (\n    <div className='image-form'>\n      <h1>Image Form</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {renderedFields()}\n        <input className='submit-button' type='submit' value='submit'></input>\n      </form>\n    </div>\n  );\n};\n\nexport default ImageForm;\n","import React from 'react';\n\nimport './DataLabelling.css';\n\nimport Image from './Image/Image';\nimport ImageData from './Image/ImageData';\nimport ImageForm from './Form/ImageForm';\n\nconst DataLabelling = () => {\n  const { useState, useEffect } = React;\n  const [results, setResults] = useState(null);\n  const [renderImage, setRenderImage] = useState(null);\n\n  // whenever renderImage updates in state, a new image is fetched\n  useEffect(() => {\n    getImage();\n  }, [renderImage]);\n\n  const getImage = () => {\n    const api = 'https://tyi19eoxij.execute-api.us-west-2.amazonaws.com/prod';\n    fetch(api)\n      .then(response => response.json())\n      .then(data => {\n        console.log('Success:', data);\n        setResults(data);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  };\n\n  const renderResults = () => {\n    const { frame_url, id, code, pipe_parameters } = results;\n    const { diameter, material, shape } = pipe_parameters;\n    return (\n      <section className='data-labelling'>\n        <div className='image-display'>\n          <Image url={frame_url} alt={id} />\n        </div>\n        <div className='image-info'>\n          <ImageData\n            code={code}\n            diameter={diameter}\n            material={material}\n            shape={shape}\n          />\n          <hr />\n          <ImageForm code={code} id={id} setRenderImage={setRenderImage} />\n        </div>\n      </section>\n    );\n  };\n\n  return <>{results ? renderResults() : <h1>Loading Image</h1>}</>;\n};\n\nexport default DataLabelling;\n","import React from 'react';\n\nimport './App.css';\nimport DataLabelling from './components/DataLabelling';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <DataLabelling />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}